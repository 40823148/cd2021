<h1>About</h1>
<p><img alt="" height="276" src="/images/D0QgRWKXQAA5O_e.jpg" width="300"/></p>
<p></p>
<p>20歲 是大學生</p>
<p>網站維護什麼的有在做</p>
<p></p>
<p>本次課程以分組設計產品為主</p>
<p>個人網站已更新個人活動及分組心得</p>
<p><a href="https://github.com/40823148/cd2021">個人倉儲</a></p>
<p><a href="https://www.youtube.com/watch?v=072tU1tamd0&amp;ab_channel=Majima">YouTube</a></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h1>stage1</h1>
<p style="text-align: center;">兩人一組 以短時間內設計產品</p>
<p style="text-align: center;"><a href="https://40823148.github.io/stage1-ag20/content/index.html">組別網站</a></p>
<p style="text-align: center;"><strong>產品題目</strong>:四驅車</p>
<p><img alt="" height="225" src="/images/EKWXRiCUYAAk7Qa.jpg" width="300"/></p>
<p style="text-align: center;"><strong>組員</strong></p>
<p style="text-align: center;">40823127 陳佑杰</p>
<p style="text-align: center;"><a href="https://github.com/40823127">組員倉儲</a></p>
<p style="text-align: center;">40823148 韋誠昌</p>
<p style="text-align: center;"><a href="https://github.com/40823148">組員倉儲</a></p>
<p></p>
<h2>stage1工作內容</h2>
<p>負責車體尺寸設計 繪圖 以及<span>CoppleliaSim</span>模擬</p>
<p></p>
<p><strong>產品尺寸設計</strong></p>
<p>先以2D軟體設計尺寸 再以3D軟體建模</p>
<p>2d產品設計圖▼</p>
<p><img alt="" height="200" src="/images/messageImage_1616027858095.jpg" width="300"/></p>
<p>3d軟體實體圖▼</p>
<p><img alt="" height="168" src="/images/messageImage_1616018022405.jpg" width="300"/></p>
<p></p>
<p></p>
<p><strong>CoppleliaSim模擬</strong></p>
<p><span>3D軟體建模後 放進CoppleliaSim裡進行物理模擬除錯</span></p>
<p><span>反覆進行錯更改模型</span></p>
<p><span></span></p>
<p></p>
<p><span></span></p>
<p></p>
<h2>stage1後記</h2>
<p>這次作業時間較短 只有4個禮拜</p>
<p>花了較多時間再於設計及繪圖上</p>
<p>以至於模擬除錯時間不足 導致沒有達到理想中的效果</p>
<p></p>
<p>此次人數較少 單人作業量較高</p>
<p>不過有利於對於磨練軟體熟練度及技術</p>
<p>從中有學到了不少軟體使用上的技法</p>
<p></p>
<p>檔案連結</p><h1>stage2</h1>
<p><strong></strong></p>
<p>四人一組 以五個禮拜內設計產品</p>
<p><a href="https://40823144.github.io/stage2-ag10/content/index.html">組別網站</a></p>
<p><strong>產品題目</strong>:四腳獸</p>
<p><img alt="" height="224" src="/images/立體1.jpg" width="300"/></p>
<p><strong>組員</strong></p>
<p>40823127 陳佑杰</p>
<p><a href="https://github.com/40823127">組員倉儲</a></p>
<p>40823142 廖韋博</p>
<p><a href="https://github.com/40823142/cd2021">組員倉儲</a></p>
<p>40823144柯晉瑚</p>
<p><a href="https://github.com/40823144/cd2021">組員倉儲</a></p>
<p>40823148 韋誠昌</p>
<p><a href="https://github.com/40823148">組員倉儲</a></p>
<p></p>
<h2>stage2工作內容</h2>
<p>負責連桿設計討論 行走模擬</p>
<p><strong>連桿設計討論</strong></p>
<p>此次連桿設計引用Jansen's linkage</p>
<p>第一版又自行設計連桿長度 但行走軌跡不如理想</p>
<p>2.3版皆採用<span>Jansen's linkage連桿設計長度</span></p>
<p><span></span></p>
<p><span>第二版採用6隻腳的設計 行走時較四隻腳平穩</span></p>
<p><span>但中間腳的連桿會因軸穿越本體跟軸有干涉 後改成四足</span></p>
<p><span></span></p>
<p><span>第三版改成四足設計 將原本曲柄交錯放置改成單邊放置</span></p>
<p>且行走週期從三部分改成兩部分 再以交錯隻腳設為同動</p>
<p><span>第三版實體圖▼</span></p>
<p><img alt="" height="224" src="/images/立體1.jpg" width="300"/></p>
<p><span>2d軟體零件圖</span>▼</p>
<p><span><img alt="" height="206" src="/images/cad零件表.jpg" width="300"/></span></p>
<p></p>
<p><strong>行走模擬</strong></p>
<p><strong></strong></p>
<p>此次模擬常遇到的問題有</p>
<p>大量分件</p>
<p>dummy的串接</p>
<p>實體碰撞的支撐性</p>
<p>對於軟體需要一定的熟練度 非常考驗組裝邏輯和碰撞設定</p>
<p></p>
<p></p>
<h2>stage2後記</h2>
<p><strong></strong>此次設計分為兩個作業向 連桿設計繪圖及行走模擬</p>
<p>設計繪圖方面需要對連桿有一定知識 對於連桿長度及其考驗</p>
<p>長度稍有不同 軌跡就會不同</p>
<p>行走模擬考驗對軟體的熟練度以及組裝時的邏輯跟碰撞設定</p>
<p>最常遇到的是大量分件的耐心 使用dummy使連桿串接 開啟實體碰撞時的支撐問題</p>
<p></p>
<p>此次組員間合作良好 彼此都清楚各領域在做什麼</p>
<p>不論在繪圖設計或模擬上的討論 大家都會提出想法及疑問</p>
<p>人數適中 各組員進度比較好追蹤</p>
<p>總而言之非常棒</p>
<p></p>
<p>檔案連結</p><h1>stage3</h1>
<p style="text-align: center;">八人一組 在9個禮拜內設計產品</p>
<p style="text-align: center;"><a href="https://40823148.github.io/cd2021-stage3-ag4/content/index.html">組別網站</a></p>
<p style="text-align: center;"><strong>產品題目</strong>:四腳獸進階</p>
<p style="text-align: center;">能自行行走 利用lua鍵盤控制兩軸轉速以達到轉彎</p>
<p></p>
<p style="text-align: center;"><strong>組員</strong></p>
<p style="text-align: center;">張欽堯 40823114 <a href="https://github.com/40823114/cd2021">repo</a> <a href="https://40823114.github.io/cd2021/content/index.html">site</a></p>
<p style="text-align: center;">粘晁維 40823121 <a href="https://github.com/40823121/cd2021">repo</a> <a href="https://40823121.github.io/cd2021/content/index.html">site</a></p>
<p style="text-align: center;">陳佑杰 40823127 <a href="https://github.com/40823127/cd2021">repo</a> <a href="https://40823127.github.io/cd2021/content/index.html">site</a></p>
<p style="text-align: center;">林澤叡 40823135 <a href="https://github.com/40823135/cd2021">repo</a> <a href="https://40823135.github.io/cd2021/content/index.html">site</a></p>
<p style="text-align: center;">廖韋博 40823142 <a href="https://github.com/40823142/cd2021">repo</a> <a href="https://40823142.github.io/cd2021/content/index.html">site</a></p>
<p style="text-align: center;">柯晉瑚 40823144 <a href="https://github.com/40823144/cd2021">repo</a> <a href="https://40823144.github.io/cd2021/content/index.html">site</a></p>
<p style="text-align: center;">蕭宏翔 40823146 <a href="https://github.com/40823146/cd2021">repo</a> <a href="https://40823146.github.io/cd2021/content/index.html">site</a></p>
<p style="text-align: center;"></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><br/><br/><br/><br/></p>
<h2>stage3工作內容</h2>
<p><strong></strong>本次作業目標為讓四腳獸站立並用鍵盤控制。</p>
<p>此專案分為多個版本 如下</p>
<p><strong>第一版(原版)</strong></p>
<p>此版沿用上次專案之模型場景，並試著將設定更改嘗試讓它直線行走。</p>
<p>多方嘗試後發現，四足在站立上極限，行走上支撐度不足，故研究多足排列組合嘗試。</p>
<p><strong>3D圖▼</strong></p>
<p><strong><img alt="" height="224" src="/images/立體1.jpg" width="300"/></strong></p>
<p><strong><span>coppliasim組合圖▼</span></strong></p>
<p><strong><span><img alt="" height="169" src="/images/messageImage_1624502487682.jpg" width="300"/></span></strong></p>
<p><strong><span>第一版模擬影片▼</span></strong></p>
<p><strong><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ACZkHVhPMu0" width="560"></iframe></span></strong></p>
<p><strong><span>第二版(六足排列)</span></strong></p>
<p>此版改為六足橫向排列，以增加腳觸地時的支撐點。</p>
<p>此版前後依舊維持兩連動腳，前後容易造成翻滾，故改變其排列組合。</p>
<p><strong>3D圖▼</strong></p>
<p><strong><img alt="" height="196" src="/images/六腳1.jpg" width="300"/></strong></p>
<p><strong><span>coppliasim組合圖▼</span></strong></p>
<p><strong><span><img alt="" height="157" src="/images/飛走1.gif" width="300"/></span></strong></p>
<p><strong><span>第二版模擬影片▼</span></strong></p>
<p><strong><span><img alt="" height="157" src="/images/表單1.gif" width="300"/></span></strong></p>
<p><strong><span>第三版(前後四足八腳)</span></strong></p>
<p>此版改為前後八腳板，此版利用兩連動腳組成一組，排列成四方四足。</p>
<p>此版模擬時發現關節連接處並未依照預期情況支撐住，故思考是否為零件立體化設計問題。</p>
<p><strong>3D圖▼</strong></p>
<p><strong><img alt="" height="197" src="/images/八腳獸.jpg" width="300"/></strong></p>
<p><strong><span>coppliasim組合圖▼</span></strong></p>
<p><strong><span><img alt="" height="169" src="/images/messageImage_1624502416840.jpg" width="300"/></span></strong></p>
<p><strong><span>第三版模擬影片▼</span></strong></p>
<p><strong><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/HXbUVR_-_LE" width="560"></iframe></span></strong></p>
<p><strong><span>老師範例模擬影片▼</span></strong></p>
<p><strong><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/R2ZNevz7uKE" width="560"></iframe></strong></p>
<p><strong>鍵盤控制研究</strong></p>
<p>為達到鍵盤控制目的，故開始研究鍵盤控制程式。</p>
<p>下列使用簡易機構研究。</p>
<p><strong>簡易圖▼</strong></p>
<p><strong><img alt="" height="169" src="/images/messageImage_1624503410780.jpg" width="300"/></strong></p>
<p><strong><span>程式碼▼</span></strong></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    left_front_handle= sim.getObjectHandle('left_m')
    left_back_handle= sim.getObjectHandle('left_m')
    right_back_handle= sim.getObjectHandle('right_m')
    right_front_handle= sim.getObjectHandle('right_m')
    MaxVel=20
    leftvelocity=0
    rightvelocity=0
    dVel=5;
    --sim.setJointTargetVelocity(left_front_handle,leftvelocity)
    sim.setJointTargetVelocity(left_back_handle,leftvelocity)
    sim.setJointTargetVelocity(right_back_handle,rightvelocity)
    --sim.setJointTargetVelocity(right_front_handle,rightvelocity)
end

function sysCall_actuation() 
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==32) then
                -- right key
                leftvelocity=0
                rightvelocity=0
                sim.setJointForce(left_front_handle, 0)
                sim.setJointForce(left_back_handle, 0)
                sim.setJointForce(right_back_handle, 0)
                sim.setJointForce(right_front_handle, 0)
                break
            else
                --sim.setJointForce(left_front_handle, 10000)
                sim.setJointForce(left_back_handle, 10000)
                sim.setJointForce(right_back_handle, 10000)
                --sim.setJointForce(right_front_handle, 10000)
            end
            if (auxiliaryData[1]==2008) then
                -- up key
                leftvelocity=(leftvelocity+rightvelocity)/2
                rightvelocity=leftvelocity
                leftvelocity=leftvelocity+dVel
                rightvelocity=rightvelocity+dVel
            end
            if (auxiliaryData[1]==2007) then
                -- down key
                leftvelocity=(leftvelocity+rightvelocity)/2
                rightvelocity=leftvelocity
                leftvelocity=leftvelocity-dVel
                rightvelocity=rightvelocity-dVel
            end
            if (auxiliaryData[1]==2009) then
                -- left key
                leftvelocity=leftvelocity-dVel
                rightvelocity=rightvelocity+dVel
            end
            if (auxiliaryData[1]==2010) then
                -- right key
                leftvelocity=leftvelocity+dVel
                rightvelocity=rightvelocity-dVel
            end
        end
        message,auxiliaryData=sim.getSimulatorMessage()
    end
    
    if leftvelocity&gt;MaxVel then
        leftvelocity=MaxVel
    end
    if leftvelocity&lt;-MaxVel then
        leftvelocity=-MaxVel
    end
    
    if rightvelocity&gt;MaxVel then
                rightvelocity=MaxVel
    end
    if rightvelocity&lt;-MaxVel then
                rightvelocity=-MaxVel
    end
    
    --sim.setJointTargetVelocity(left_front_handle,leftvelocity)
    sim.setJointTargetVelocity(left_back_handle,leftvelocity)
    sim.setJointTargetVelocity(right_back_handle,rightvelocity)
    --sim.setJointTargetVelocity(right_front_handle,rightvelocity)
    
end 
</pre>
<p><strong><span> </span></strong></p>
<p><strong><span>鍵盤控制模擬影片▼</span></strong></p>
<p><strong><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2-gkyTNPIew" width="560"></iframe></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span>成果影片▼</span></strong></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/JXTgBJPdU9k" width="560"></iframe></p>
<p></p>
<p><strong></strong></p>
<h2>stage3後記</h2>
<p><strong></strong></p>
<h1>個人作業</h1>
<p></p>
<p></p>
<p></p>
<h2>SSH</h2>
<p></p>
<h4>SSH 網路連線加密機制</h4>
<p>SSH 指 Secure SHell, 是一種網路連線加密機制, 當我們在 Mac OS 或 Linux 操作系統中的 Terminal 或 XTerm 時, 可以利用 ssh 帳號@遠端主機 ip 或符號名稱, 就可以輸入認證密碼, 登入到遠端主機.</p>
<p>一般針對公開的 Github 倉儲, 任何人都可以直接透過 https 協定 clone 倉儲, 無需認證, 但是倉儲協同者若要從近端將改版資料送到 Github, 就必須通過認證, 假如採 https 協定, 則倉儲協同者在推送改版資料時, 必須提供帳號與密碼.</p>
<p>除了 https 協定, Github 也接受倉儲的協同者以 SSH 連線的方式, git clone private 倉儲, 或以 SSH 連線的方式將近端改版資料推送到遠端倉儲.</p>
<p>SSH 的連線加密機制依賴 private key 與 public key 之間的配對, 當使用者建立 SSH key pair 時, private key 必須保護在近端, 而 public key 則必須送到進行認證的遠端伺服器中.</p>
<p></p>
<p><strong>●SSH 操作步驟</strong></p>
<p></p>
<p>下載putty至近端data</p>
<p><a href="https://www.puttygen.com/download-putty">putty下載</a></p>
<p></p>
<p style="text-align: center;"><strong>建立SSH Key</strong></p>
<p style="text-align: center;"><strong></strong></p>
<p style="text-align: left;"><strong>1.開啟編輯器輸入"sh"</strong></p>
<p style="text-align: left;"><strong><img alt="" height="157" src="/images/messageImage_1623900474268.jpg" width="300"/></strong></p>
<p style="text-align: left;"><strong>2.輸入<span>ssh-keygen -t rsa -b 4096 -C "學號" 可得到ssh key</span></strong></p>
<p style="text-align: left;"><strong><span>▼key的建立位置</span></strong></p>
<p style="text-align: left;"><strong><span>▼輸入y</span></strong></p>
<p style="text-align: left;"><strong><span><img alt="" height="157" src="/images/messageImage_1623900565275.jpg" width="300"/></span></strong></p>
<p style="text-align: left;"><strong><span>▼enter至此即完成key建立</span></strong></p>
<p style="text-align: left;"><strong><span><img alt="" height="157" src="/images/messageImage_1623900602891.jpg" width="300"/></span></strong></p>
<p style="text-align: center;"><b>github建立shh key</b></p>
<p style="text-align: center;"><b></b></p>
<p style="text-align: left;"><strong><span>3.找到路徑上的key</span></strong></p>
<p style="text-align: left;"><strong><span><img alt="" height="255" src="/images/messageImage_1623900638146.jpg" width="300"/></span></strong></p>
<p style="text-align: left;"><strong><span>4.用SCITE把id_rsa.pub 開啟 複製裡面所有的文字</span></strong></p>
<p style="text-align: left;"><strong><span><img alt="" height="124" src="/images/messageImage_1623900779212.jpg" width="300"/></span></strong></p>
<p style="text-align: left;"><strong><span>5.到Github--&gt;seeting--&gt;SSH and GPG keys 按下"New SSH key"</span></strong></p>
<p style="text-align: left;"><strong><span><img alt="" height="203" src="/images/messageImage_1623900863502.jpg" width="300"/></span></strong></p>
<p style="text-align: left;"><strong>6.Title 上寫上學號 Key 複製貼上剛剛的Key 再按下"Add SSH key"</strong></p>
<p style="text-align: left;"><strong><img alt="" height="172" src="/images/messageImage_1623900923938.jpg" width="300"/></strong></p>
<p style="text-align: left;"><strong></strong></p>
<p style="text-align: center;"><b>puttygen.exe</b></p>
<p style="text-align: center;"><b></b></p>
<p style="text-align: left;"><b>7.開啟puttygen.exe</b></p>
<p style="text-align: left;"><b><img alt="" height="245" src="/images/messageImage_1623901131678.jpg" width="300"/></b></p>
<p style="text-align: left;"><strong>8.按下"Load"</strong></p>
<p style="text-align: left;"><strong><img alt="" height="295" src="/images/messageImage_1623901184597.jpg" width="300"/></strong></p>
<p style="text-align: left;"><strong>▼選取<span>選取id_rsa </span></strong></p>
<p style="text-align: left;"><strong><img alt="" height="169" src="/images/messageImage_1623901373986.jpg" width="300"/></strong></p>
<p style="text-align: left;"><strong>▼<span>按下"save private key" 得到ppk 存到同一個路徑</span></strong></p>
<p style="text-align: left;"><strong><img alt="" height="295" src="/images/messageImage_1623901422269.jpg" width="300"/></strong></p>
<p style="text-align: left;"><strong>▼.ppk檔</strong></p>
<p style="text-align: left;"><strong><img alt="" height="239" src="/images/messageImage_1623901525084.jpg" width="300"/></strong></p>
<p style="text-align: center;"><strong><span>putty.exe</span></strong></p>
<p style="text-align: left;"><b>9.開啟<span>putty.exe</span></b></p>
<p style="text-align: left;"><b><img alt="" height="281" src="/images/messageImage_1623901564031.jpg" width="300"/></b></p>
<p style="text-align: left;"><b>10.<span>在"Saved Sessions" 輸入 "github.com" 在按下 "Save"</span></b></p>
<p style="text-align: left;"><b><span><img alt="" height="293" src="/images/messageImage_1623901620415.jpg" width="300"/></span></b></p>
<p style="text-align: left;"><b><span>11.再到 "Auth" 找到"Private key file for authentication" 按下"browse" </span></b></p>
<p style="text-align: left;"><b><span><img alt="" height="293" src="/images/messageImage_1623901658383.jpg" width="300"/></span></b></p>
<p style="text-align: left;">▼<strong>選取.ppk檔</strong></p>
<p style="text-align: left;"><strong><img alt="" height="169" src="/images/messageImage_1623901667360.jpg" width="300"/></strong></p>
<p style="text-align: left;"><strong>12.回到"session" <span>按下"github.com" 再按下 "Save"</span></strong></p>
<p style="text-align: left;"><strong><img alt="" height="293" src="/images/messageImage_1623901717811.jpg" width="300"/></strong></p>
<p style="text-align: left;"><strong></strong></p>
<p style="text-align: center;"><strong>.git/config 與 <span>start.bat 更改</span></strong></p>
<p style="text-align: left;"><strong><span>13.找到.git資料夾(*如果找不到這個資料夾記得在功能區--&gt; 顯示--&gt;將"隱藏的項目"勾選)</span></strong></p>
<p style="text-align: left;"><strong><span><img alt="" height="245" src="/images/messageImage_1623901756241.jpg" width="300"/></span></strong></p>
<p style="text-align: left;"><strong><span>14.找到config 用SCITE開啟</span></strong></p>
<p style="text-align: left;"><strong><span><img alt="" height="245" src="/images/messageImage_1623901774026.jpg" width="300"/></span></strong></p>
<p style="text-align: left;"><strong><span>15.輸入</span></strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#url = https://github.com/40823148/cd2021.git
    url = git@github.com:40823148/cd2021.git</pre>
<p style="text-align: left;"><img alt="" height="339" src="/images/messageImage_1623901843042.jpg" width="300"/></p>
<p style="text-align: left;"><strong>16.找到 start.bat  用SCITE開啟</strong></p>
<p style="text-align: left;"><strong><span><img alt="" height="239" src="/images/messageImage_1623901874525.jpg" width="300"/></span></strong></p>
<p style="text-align: left;"><strong><span>17.輸入</span></strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">set GIT_HOME=%Disk%:\portablegit\bin\
set GIT_SSH=%Disk%:\putty\plink.exe</pre>
<p style="text-align: left;"><img alt="" height="339" src="/images/messageImage_1623901895602.jpg" width="300"/></p>
<p style="text-align: left;"><strong>即完成SHH設置</strong></p>
<p style="text-align: left;"><strong>end</strong></p>
<h2>機械手臂控制</h2>
<p></p>
<p>利用<strong>onshape</strong>繪製手臂簡圖 手臂包含底座、手臂1、手臂2和夾頭</p>
<p></p>
<p>組合圖▼</p>
<p><img alt="" height="155" src="/images/messageImage_1623897709206.jpg" width="300"/></p>
<p></p>
<p></p>
<p>匯出stl檔 丟入CoppeliaSim進行組合</p>
<p>底座和手臂1連接一旋轉軸</p>
<p>手臂1和手臂2連接一旋轉軸</p>
<p>夾頭本身具有一旋轉軸及一上下移動軸</p>
<p></p>
<p><span>CoppeliaSim組合圖▼</span></p>
<p><span><img alt="" height="169" src="/images/messageImage_1623897729265.jpg" width="300"/></span></p>
<p><span></span></p>
<p><span>組合完成後分別以Lua程式、Lua鍵盤程式和python remote api進行模擬控制</span></p>
<p><span></span><a href="https://cad.onshape.com/documents/e8bd0149b0ac0404b15015dc/w/ad6bf123cb5b509262432800/e/030073028105c066310b2629">零件檔案</a></p>
<p>程式檔案下載</p>
<h3>Lua程式控制</h3>
<p></p>
<p>撰寫lua程式達到自動取放方塊</p>
<p></p>
<p>lua程式碼▼</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function moving(x,y)
    a=0.400
    b=0.400
    c=math.pow(math.pow(x,2)+math.pow(y,2),0.5)
    s=(a+b+c)/2
    area=math.pow((s*(s-a)*(s-b)*(s-c)),0.5)
    h=area/(2*c)
    deg1_base=math.atan(x/y)
    if x&lt;0 and y&lt;0 then
        deg1_base=deg1_base+math.pi
    end
    deg1_tri=math.asin(h/a)
    deg1=deg1_base+deg1_tri
    deg2=math.pi-(0.5*math.pi-deg1_tri)-math.acos(h/b)
    deg3=deg2-deg1
    sim.setJointTargetPosition(joint01,deg1)
    sim.setJointTargetPosition(joint02,-deg2)
    sim.setJointTargetPosition(joint03,deg3)
    
end

function sysCall_threadmain()
    joint01=sim.getObjectHandle('joint1')
    joint02=sim.getObjectHandle('joint2')
    joint03=sim.getObjectHandle('joint3')
    jointz=sim.getObjectHandle('jointz')
    sim.setJointTargetPosition(joint01,0)
    sim.setJointTargetPosition(joint02,0)
    sim.setJointTargetPosition(joint03,0)
    sim.setJointTargetPosition(jointz,0)
    sim.setIntegerSignal("pad_switch",1)
    sim.setJointTargetPosition(jointz,-0.030)
    sim.wait(2)
    sim.setJointTargetPosition(jointz,0)
     while sim.getSimulationState()~=sim.simulation_advancing_abouttostopre do
        moving(0.2,0.7)
        sim.wait(5)
        sim.setIntegerSignal("pad_switch",0)
        sim.wait(5)
        sim.setIntegerSignal("pad_switch",1)
        sim.setJointTargetPosition(jointz,-0.056)
        sim.wait(5)
        sim.setJointTargetPosition(jointz,0)
        sim.wait(5)
        moving(-0.3,-0.55)
        sim.wait(5)
        sim.setIntegerSignal("pad_switch",0)
        sim.wait(5)
        sim.setIntegerSignal("pad_switch",1)
        sim.setJointTargetPosition(jointz,-0.06)
        sim.wait(5)
        sim.setJointTargetPosition(jointz,0)
        sim.wait(5)
        moving(0.1,0.55)
        sim.wait(5)
        sim.setIntegerSignal("pad_switch",0)
        sim.wait(5)
        sim.setIntegerSignal("pad_switch",1)
        sim.setJointTargetPosition(jointz,-0.056)
        sim.wait(5)
        sim.setJointTargetPosition(jointz,0)
        sim.wait(5)
        moving(0,0.8)
        sim.wait(5)
        sim.setIntegerSignal("pad_switch",0)
        sim.wait(5)
        sim.setIntegerSignal("pad_switch",1)
        sim.setJointTargetPosition(jointz,-0.056)
        sim.wait(5)
        sim.setJointTargetPosition(jointz,0)
        sim.wait(5)
    end
end</pre>
<p><br/><br/></p>
<p>成果影片▼</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/LzTVGoz29aU" width="560"></iframe></p>
<h3>Lua鍵盤控制</h3>
<p></p>
<p>撰寫Lua鍵盤控制程式 來達到使用鍵盤手動控制手臂位置及方塊取放</p>
<p></p>
<p>Lua鍵盤控制程式碼▼</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    joint1=sim.getObjectHandle('joint1')
    joint2=sim.getObjectHandle('joint2')
    jointz=sim.getObjectHandle('jointZ')
    joint3=sim.getObjectHandle('joint3')
    sim.setJointTargetPosition(joint1,0)
    sim.setJointTargetPosition(joint2,0)
    sim.setJointTargetPosition(joint3,0)
    sim.setJointTargetPosition(jointz,0)
    deg1=0
    deg2=0
    deg3=0
end

function sysCall_actuation()
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==2009) then
            deg1=deg1+10
            deg3=deg2-deg1
            sim.setJointTargetPosition(joint1,deg1*math.pi/180)
            end
            if (auxiliaryData[1]==2010) then
            deg1=deg1-10
            deg3=deg2-deg1
            sim.setJointTargetPosition(joint1,deg1*math.pi/180)
            end
            if (auxiliaryData[1]==2007) then
            deg2=deg2+10
            deg3=deg1-deg2
            sim.setJointTargetPosition(joint2,deg2*math.pi/180)
            end
            if (auxiliaryData[1]==2008) then
            deg2=deg2-10
            deg3=deg1-deg2
            sim.setJointTargetPosition(joint2,deg2*math.pi/180)
            end
            if (auxiliaryData[1]==115) then
                sim.setJointTargetPosition(jointz,-0.055)
                sim.setIntegerSignal("pad_switch",1)
            end
            if(auxiliaryData[1]==119) then
                sim.setJointTargetPosition(jointz,0)
            end
            if(auxiliaryData[1]==32) then
                sim.setIntegerSignal("pad_switch",0)
            end
            sim.setJointTargetPosition(joint3,deg3*math.pi/180)
        end
    message,auxiliaryData=sim.getSimulatorMessage()
    end
end</pre>
<p><br/><br/></p>
<p>成果影片▼</p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qU561a7ScpI" width="560"></iframe></p>
<p></p>
<h3>python remote api</h3>
<p></p>
<p>利用python remote api 在軟體外部控制方塊取放</p>
<p></p>
<p>python remote api程式碼▼</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import math
import random
import time
import math

def moving(x,y):
    a=0.400
    b=0.400
    c=math.pow(math.pow(x,2)+math.pow(y,2),0.5)
    s=(a+b+c)/2
    area=math.pow((s*(s-a)*(s-b)*(s-c)),0.5)
    h=area/(2*c)
    deg1_base=math.atan(x/y)
    if x&lt;0 and y&lt;0 :
        deg1_base=deg1_base+math.pi
    deg1_tri=math.asin(h/a)
    deg1=deg1_base+deg1_tri
    deg2=math.pi-(0.5*math.pi-deg1_tri)-math.acos(h/b)
    deg3=deg2-deg1
    vrep.simxSetJointTargetPosition(clientID,joint01, deg1,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint02, -deg2,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint03, deg3,opmode)


print('start')

vrep.simxFinish(-1)
 
clientID = vrep.simxStart('127.0.0.1', 19999, True, True, 5000, 5)
 
if clientID!= -1:
    print("Connected to remote API server")
    
    res=vrep.simxAddStatusbarMessage(
        clientID,"123",
        vrep.simx_opmode_oneshot)
    if res not in (vrep.simx_return_ok,vrep.simx_return_novalue_flag):
        print("could not add a message to the status bar.")
        
        
    opmode=vrep.simx_opmode_oneshot_wait
    STREAMING=vrep.simx_opmode_streaming
    
    vrep.simxStartSimulation(clientID,opmode)
    ret,joint01=vrep.simxGetObjectHandle(clientID,"joint1",opmode)
    ret,joint02=vrep.simxGetObjectHandle(clientID,"joint2",opmode)
    ret,joint03=vrep.simxGetObjectHandle(clientID,"joint3",opmode)
    ret,jointz=vrep.simxGetObjectHandle(clientID,"jointz",opmode)
    
    vrep.simxSetJointTargetPosition(clientID,joint01,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint02,0,opmode)
    vrep.simxSetJointTargetPosition(clientID,joint03,0,opmode)
    vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)
    vrep.simxSetJointTargetPosition(clientID,jointz,-0.056,opmode)
    time.sleep(1)
    vrep.simxSetJointTargetPosition(clientID,jointz,0,opmode)
    while True:
        moving(0.2,0.7)
        time.sleep(1)
        vrep.simxSetIntegerSignal(clientID,"pad_switch",0,opmode)
        time.sleep(1)
        vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)
        vrep.simxSetJointTargetPosition(clientID,jointz,-0.056,opmode)
        time.sleep(1)
        vrep.simxSetJointTargetPosition(clientID,jointz,0,opmode)
        moving(-0.3,-0.55)
        time.sleep(1)
        vrep.simxSetIntegerSignal(clientID,"pad_switch",0,opmode)
        time.sleep(1)
        vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)
        vrep.simxSetJointTargetPosition(clientID,jointz,-0.056,opmode)
        time.sleep(1)
        vrep.simxSetJointTargetPosition(clientID,jointz,0,opmode)</pre>
<p><br/><br/></p>
<p>成果影片▼</p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/FInieDDrPvo" width="560"></iframe></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h2>stage1四驅車延伸</h2>
<p>新增兩種控制方式 並大幅簡化模擬實的模型</p>
<p>完整實體圖▼</p>
<p><img alt="" height="168" src="/images/messageImage_1616018022405.jpg" width="300"/></p>
<p>簡化設計圖▼</p>
<p></p>
<p>coppliasim組合圖▼</p>
<p><img alt="" height="165" src="/images/messageImage_1623907067106.jpg" width="300"/></p>
<p>檔案下載</p><h3>鍵盤控制</h3>
<p>使用lua程式控制車子前進、後退和停止</p>
<p>lua程式碼▼</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    left_front_handle= sim.getObjectHandle('s11')
    left_back_handle= sim.getObjectHandle('s11')
    right_back_handle= sim.getObjectHandle('s22')
    right_front_handle= sim.getObjectHandle('s22')
    MaxVel=27
    leftvelocity=0
    rightvelocity=0
    dVel=2.7;
    --sim.setJointTargetVelocity(left_front_handle,leftvelocity)
    sim.setJointTargetVelocity(left_back_handle,leftvelocity)
    sim.setJointTargetVelocity(right_back_handle,rightvelocity)
    --sim.setJointTargetVelocity(right_front_handle,rightvelocity)
end

function sysCall_actuation() 
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==32) then
                -- right key
                leftvelocity=0
                rightvelocity=0
                sim.setJointForce(left_front_handle, 0)
                sim.setJointForce(left_back_handle, 0)
                sim.setJointForce(right_back_handle, 0)
                sim.setJointForce(right_front_handle, 0)
                break
            else
                --sim.setJointForce(left_front_handle, 10000)
                sim.setJointForce(left_back_handle, 10000)
                sim.setJointForce(right_back_handle, 10000)
                --sim.setJointForce(right_front_handle, 10000)
            end
            if (auxiliaryData[1]==2008) then
                -- up key
                leftvelocity=(leftvelocity+rightvelocity)/2
                rightvelocity=leftvelocity
                leftvelocity=leftvelocity+dVel
                rightvelocity=rightvelocity+dVel
            end
            if (auxiliaryData[1]==2007) then
                -- down key
                leftvelocity=(leftvelocity+rightvelocity)/2
                rightvelocity=leftvelocity
                leftvelocity=leftvelocity-dVel
                rightvelocity=rightvelocity-dVel
            end
            
        end
        message,auxiliaryData=sim.getSimulatorMessage()
    end
    
    if leftvelocity&gt;MaxVel then
        leftvelocity=MaxVel
    end
    if leftvelocity&lt;-MaxVel then
        leftvelocity=-MaxVel
    end
    
    if rightvelocity&gt;MaxVel then
                rightvelocity=MaxVel
    end
    if rightvelocity&lt;-MaxVel then
                rightvelocity=-MaxVel
    end
    
    
    sim.setJointTargetVelocity(left_back_handle,leftvelocity)
    sim.setJointTargetVelocity(right_back_handle,rightvelocity)
   
    
end </pre>
<p><br/><br/></p>
<p>成果影片▼</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bY50ou4_bm8" width="560"></iframe></p>
<h3>python remote api 控制</h3>
<p>使用 python remote api 外部控制車子啟動</p>
<p></p>
<p>python程式碼▼</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import sys
# child threaded script: 
#simExtRemoteApiStart(19999)
 
vrep.simxFinish(-1)
 
clientID = vrep.simxStart('127.0.0.1', 19999, True, True, 5000, 5)
 
if clientID!= -1:
    print("Connected to remote server")
else:
    print('Connection not successful')
    sys.exit('Could not connect')
 
errorCode,joint=vrep.simxGetObjectHandle(clientID,'input',vrep.simx_opmode_oneshot_wait)
 

 
if errorCode == -1:
    print('Can not find left or right motor')
    sys.exit()
 
errorCode=vrep.simxSetJointTargetVelocity(clientID,joint,-270, vrep.simx_opmode_oneshot_wait)

</pre>
<p><br/><br/></p>
<p>成果影片▼</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/1d78G6XUT1k" width="560"></iframe></p>
<h1>使用軟體</h1>
<p></p>
<p><strong>AutoCAD 2017</strong></p>
<p><strong>SOLIDWORKS 2017</strong></p>
<p><strong>Inventor 2017</strong></p>
<p><strong><span>Onshape</span></strong></p>
<p><strong><span>CoppeliaSim Edu (v4.10)</span></strong></p>
<p><strong><span>CoppeliaSim Edu (v4.20)</span></strong></p>
<p><strong>RoboDK</strong></p>
<p><strong>pyslvs</strong></p>
<p></p>